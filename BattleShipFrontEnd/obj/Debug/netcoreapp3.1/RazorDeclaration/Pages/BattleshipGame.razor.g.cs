#pragma checksum "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\Pages\BattleshipGame.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6681bb353f076bdbe821190538da9746412615e9"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BattleShipFrontEnd.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\_Imports.razor"
using BattleShipFrontEnd;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\_Imports.razor"
using BattleShipFrontEnd.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\_Imports.razor"
using BlazorStyled;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\Pages\BattleshipGame.razor"
using BattleShipFrontEnd.Data.BattleshipData;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\Pages\BattleshipGame.razor"
using BattleShipFrontEnd.Data.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\Pages\BattleshipGame.razor"
using BattleShipFrontEnd.Data.LoginData;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\Pages\BattleshipGame.razor"
using BattleShipFrontEnd.Models;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Game")]
    public partial class BattleshipGame : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 121 "C:\Users\vasil\Repos\Battleships\BattleshipFrontend\BattleShipFrontEnd\Pages\BattleshipGame.razor"
       
	private List<Char> lettersArray { get; set; } = new List<char>{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
	private const int rows = 10;
	private const int columns = 10;
	private int shipTypePlayer = 5;
	private bool canPlaceShip = true;
	private bool canStartShooting = false;
	private bool playerWin = false;
	private string shipPlacementInstruction;
	private string shootingInstruction;
	private string saveGameMessage;
	private GameTile[] gameTilesPlayer;
	private GameTile[] gameTilesEnemy;
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	protected override async Task OnInitializedAsync() {
		var authState = await authenticationStateTask;
		var user = authState.User;
		string username = user.Identity.Name;
		bool gameSaved = await BattleShipAccess.CheckForSavedGame(username);
		if (gameSaved) {
			gameTilesPlayer = await GameTileService.GetGameTilesAsync();
			gameTilesEnemy = await GameTileService.GetGameTilesAsync();
			GameConfig gameConfig = await BattleShipAccess.LoadGame(username);
			shipTypePlayer = 0;
			canStartShooting = true;
			int[] tileConfigPlayer = gameConfig.PlayerConfig;
			int[] tileConfigEnemy = gameConfig.BotConfig;
			for (int yy = 0; yy < rows; yy++) {
				for (int xx = 0; xx < columns; xx++) {
					int index = yy * columns + xx;
					GameTile gameTile = gameTilesPlayer[index];
					switch (tileConfigPlayer[index]) {
						case 0:
							break;
						case 1:
							gameTile.ColorGrey = true;
							break;
						case 2:
						case 3:
						case 4:
						case 5:
						case 6:
							gameTile.ColorBlue = true;
							break;
						case 7:
						case 8:
						case 9:
						case 10:
						case 11:
							gameTile.ColorRed = true;
							break;
					}
				}
			}
			for (int yy = 0; yy < rows; yy++) {
				for (int xx = 0; xx < columns; xx++) {
					int index = yy * columns + xx;
					GameTile gameTile = gameTilesEnemy[index];
					switch (tileConfigEnemy[index]) {
						case 0:
							break;
						case 1:
							gameTile.ColorGrey = true;
							break;
						case 2:
						case 3:
						case 4:
						case 5:
						case 6:
							break;
						case 7:
						case 8:
						case 9:
						case 10:
						case 11:
							gameTile.ColorRed = true;
							break;
					}
				}
			}
			await BattleShipAccess.DeleteSave(username);
			shootingInstruction = "Game successfully loaded, you can resume playing!";
		} else {
			gameTilesPlayer = await GameTileService.GetGameTilesAsync();
			gameTilesEnemy = await GameTileService.GetGameTilesAsync();
			await BattleShipAccess.InitializeGameAsync();			
		}
	}

	private async Task HandleClickPlayerBoard(double fakeCoord) {
		if (shipTypePlayer > 0) {
			int coord = (int) Math.Truncate(fakeCoord);
			bool isVertical = !(coord < fakeCoord);
			canPlaceShip = await CanPlayerPlaceShip(coord, shipTypePlayer, isVertical);
			if (canPlaceShip) {
				if (isVertical) {
					for (int i = 0; i < shipTypePlayer; i++) {
						gameTilesPlayer[coord].ColorBlue = true;
						coord += columns;
					}
				}
				else {
					for (int i = 0; i < shipTypePlayer; i++) {
						gameTilesPlayer[coord].ColorBlue = true;
						coord++;
					}
				}
				shipTypePlayer--;
			}
			shipPlacementInstruction = canPlaceShip ? "Ship placed!" : "You can't place your ship there!";
			if (shipTypePlayer == 0) {
				shipPlacementInstruction = "";
				shootingInstruction = "The game begins";
				canStartShooting = true;
			}
		}
	}

	private async Task HandleClickEnemyBoard(double coord) {
		if (canStartShooting) {
			int rCoord = (int) coord;
			int x = rCoord % columns;
			int y = rCoord / columns;
			if (gameTilesEnemy[rCoord].ColorGrey || gameTilesEnemy[rCoord].ColorRed) {
				shootingInstruction = "You already shot that tile!";
				return;
			}
			ApiShootGameTileResults results = await BattleShipAccess.ShootTile(x, y);
			List<Coordinate> tilesHitByBot = results.Coordinates;
			bool shipHit = results.WasHit;
			if (shipHit) {
				gameTilesEnemy[rCoord].ColorRed = true;
				shootingInstruction = "You hit an enemy ship!";
			}
			if (!shipHit) {
				gameTilesEnemy[rCoord].ColorGrey = true;
				shootingInstruction = "You missed...";
			}
			foreach (var coordinate in tilesHitByBot) {
				int xx = coordinate.X;
				int yy = coordinate.Y;
				int bCoor = yy * columns + xx;
				bool wasPlayerShipHit = coordinate.WasHit;
				bool botWin = coordinate.BotWin;
				playerWin = coordinate.PlayerWin;
				if (playerWin) {
					NavigationManager.NavigateTo("/WinScreen");
				}
				if (botWin) {
					NavigationManager.NavigateTo("/LoseScreen");
				}
				if (wasPlayerShipHit) {
					gameTilesPlayer[bCoor].ColorBlue = false;
					gameTilesPlayer[bCoor].ColorRed = true;
				}
				if (!wasPlayerShipHit) {
					gameTilesPlayer[bCoor].ColorBlue = false;
					gameTilesPlayer[bCoor].ColorGrey = true;
				}
			}
		}
	}

	private async Task<bool> CanPlayerPlaceShip(int coord, int typeOfShip, bool isVertical) {
		int x = coord % columns;
		int y = coord / columns;
		return await BattleShipAccess.CanPlayerPlaceShipAsync(typeOfShip, x, y, isVertical);
	}

	private async Task SaveGame() {
		if (shipTypePlayer  == 0) {
			var authState = await authenticationStateTask;
			var user = authState.User;
			string username = user.Identity.Name;
			string response = await BattleShipAccess.SaveGame(username);
			saveGameMessage = response;
			((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
		}
		else {
			shootingInstruction = "You can't save while placing ships!";
		}
	}

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICloudBattleShipAccess BattleShipAccess { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IGameTileService GameTileService { get; set; }
    }
}
#pragma warning restore 1591
